y <- rnorm(1, mean=3, sd=1)
ifelse(x>3 & y>3, ">3", "<3")
ifelse(x>3 | y>3, ">3", "<3")
x <- rnorm(1, mean=3, sd=1)
y <- rnorm(1, mean=3, sd=1)
ifelse(x>3 & y>3, ">3", "<3")
ifelse(x>3 | y>3, ">3", "<3")
x <- c("a", "b", "c", "d")
for(i in 1:4) {
print(x[i])
}
for(i in seq_along(x)) {
print(x[i])
}
for(letter in x) {
print(letter)
}
letter in x
for(i in 1:4) print(x[i])
for(i in x){i}
for(i in x){print(i)}
x <- matrix(1:6, 2, 3)
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))) {
print(x[i, j])
}
}
seq_len(nrow(x))
x <- c(1:5)
seq_len(x)
seq_len(c(100:105))
seq_len(100)
count <- 0
while(count < 10) {
print(count)
count <- count + 1
}
count <- c(1:5)
while(count < 10) {
print(count)
count <- count + 1
}
z <- 5
while(z >= 3 && z <= 10) {
print(z)
coin <- rbinom(1, 1, 0.5)
if(coin == 1) {  ## random walk
z <- z + 1
} else {
z <- z - 1
}
}
z <- 5
while(z >= 3 && z <= 10) {
print(z)
coin <- rbinom(1, 1, 0.5)
if(coin == 1) {  ## random walk
z <- z + 1
} else {
z <- z â€“ 1
if(z < -5){ break }
}
}
z <- 5
while(z <= 10) {
print(z)
coin <- rbinom(1, 1, 0.5)
if(coin == 1) {  ## random walk
z <- z + 1
} else if(z < 3) { break } else { z <- z-1
}
}
while(z <= 10) {
print(z)
coin <- rbinom(1, 1, 0.5)
if(coin == 1) {  ## random walk
z <- z + 1
} else if(z < 3) { break } else { z <- z-1; print(z)
}
}
z <- 5
while(z <= 10) {
print(z)
coin <- rbinom(1, 1, 0.25)
if(coin == 1) {  ## random walk
z <- z + 1
} else if(z < 3) { break } else { z <- z-1 }
}
for(i in 1:100) {
if(i <= 20) {
## Skip the first 20 iterations
next
}
## Do something here
}
for(i in 1:100) {
if(i <= 20) {
## Skip the first 20 iterations
next
}
return(i+5)
}
for(i in 1:100) {
if(i <= 20) {
## Skip the first 20 iterations
next
}
i+5
}
for(i in 1:100) {
if(i <= 20) {
## Skip the first 20 iterations
next
}
print(i+5)
}
for(i in 1:100) {
if(i <= 20) {
## Skip the first 20 iterations
next
}
print(i+5)
return()
}
for(i in 1:100) {
if(i <= 20) {
## Skip the first 20 iterations
next
}
print(i+5)
x <- c(x, i)
return(x)
}
for(i in 1:100) {
if(i <= 20) {
## Skip the first 20 iterations
next
}
print(i+5)
x <- function(i){
c(x, i)
return(x)}
}
te <- for(i in 1:100) {
if(i <= 20) {
## Skip the first 20 iterations
next
}
print(i+5)
x <- function(i){
c(x, i)
return(x)}
}
te
te <- for(i in 1:100) {
if(i <= 20) {
## Skip the first 20 iterations
next
}
print(i+5)
incr <- function(i){
x <- 1
x <- c(x, i)
return(x)
incr(i)}
}
te
incr <- function(i){
x <- 1
x <- c(x, i)
return(x)
)
incr <- function(i){
x <- 1
x <- c(x, i)
return(x)}
incr(1)
incr(1:5)
incr(2)
incr1 <- Vectorize(incr)
incr1(1:5)
incr <- function(i){
x <- 1
x <- list(c(x, i))
return(x)}
incr1
incr(1)
incr(1:5)
incr1 <- Vectorize(incr)
incr1(1:5)
x = rnorm(10)
x = rnorm(10)
loc.est = "mean"
switch(loc.est,
median = median(x),
mean = mean(x))
mean(x)
median(x)
x = rnorm(10)
loc.est = "median"
switch(loc.est,
median = median(x),
mean = mean(x))
median(x)
mean(x)
FirstName
FirstName = "Prasun"
LastName = "Prasun"
match(FirstName, LastName)
char.expand(input="Prasun", LastName)
char.expand(input="Prasun", "Das")
char.expand(input="Das", "Das")
char.expand(input="Das", c("Ptrasun", "Das"))
setdiff("Prasuin", "Das")
setdiff("Prasun", "Das")
nchar(FirstName)
sapply(nchar(FirstName), function(x) substr(FirstName, x))
sapply(nchar(FirstName), function(x) substr(FirstName, x, x))
sapply(1:nchar(FirstName), function(x) substr(FirstName, x, x))
NameCh1 <- sapply(1:nchar(FirstName), function(x) substr(FirstName, x, x))
NameCh2 <- sapply(1:nchar(LastName), function(x) substr(FirstName, x, x))
intersection(NameCh1, NameCh2)
intersect(NameCh1, NameCh2)
LastName
myFunc <- function(FirstName, LastName){
NameCh1 <- sapply(1:nchar(FirstName), function(x) substr(FirstName, x, x))
NameCh2 <- sapply(1:nchar(LastName), function(x) substr(FirstName, x, x))
return(intersect(NameCh1, NameCh2))
}
myNameFunc("Prasun", "Das")
myNameFunc <- function(FirstName, LastName){
NameCh1 <- sapply(1:nchar(FirstName), function(x) substr(FirstName, x, x))
NameCh2 <- sapply(1:nchar(LastName), function(x) substr(FirstName, x, x))
return(intersect(NameCh1, NameCh2))
}
myNameFunc("Prasun", "Das")
myNameFunc <- function(FirstName, LastName){
NameCh1 <- sapply(1:nchar(FirstName), function(x) substr(FirstName, x, x))
NameCh2 <- sapply(1:nchar(LastName), function(x) substr(LastName, x, x))
return(intersect(NameCh1, NameCh2))
}
myNameFunc("Prasun", "Das")
args(lm)
hypot = function(a, b) sqrt(a^2 + b^2)
hypot
hypot(2,3)
hypot(2:3,3:4)
hypot(2:3,3:4, 5)
myplot <- function(x, y, type = "l", ...) {
plot(x, y, type = type, ...)
}
myplot(c(1:5), c(2:6), main="Plot")
args(paste)
args(as.formula)
args(print)
incr <- function(i){
x <- 1
x <- list(c(x, i))
return(x)}
incr(1)
incr(2)
incr(3)
incr(1:3)
incr(1:3)
x <- as.Date("1970-01-01")
x
format(x, "%b")
x <- Sys.time()
datestring <- c("January 10, 2012 10:40", "December 9, 2011 12:49")
datestring
class(datestring <- c("January 10, 2012 10:40", "December 9, 2011
x <- strptime(datestring, "%B %d, %Y %H:%M")
x
## [1] "2012-01-10 10:40:00" "2011-12-09 09:10:00"
class(x)
## [1] "POSIXlt" "POSIXt")
class(datestring)
x <- strptime(datestring, "%B %d, %Y %H:%M")
x
class(x)
names(unclass(x))
x$hour
str(apply)
?ddply
str(apply)
?apply
x <- matrix(rnorm(200), 20, 10)
apply(x, 2 , mean)
apply(x, 1, mean)
x <- matrix(rnorm(200), 20, 10)
x
x <- matrix(rnorm(200), 20, 10)
apply(x, 1, quantile, probs=c(0.1, 0.5, 0.75))
x <- matrix(rnorm(10), 5, 2)
apply(x, 1, quantile, probs=c(0.1, 0.5, 0.75))
a <- array(rnorm(2*2*10), c(2,2,10))
a
apply(a, c(1,2), mean)
apply(a, c(1,10), mean)
apply(a, c(1,3), mean)
x <- data.frame(a=1:10, b=letters[1:10])
x$Vowel <- x$b %in% c("a", "e", "i", "o", "u")
x
N <- split(x, x$Vowel)
for(i in seq_along(N)){
N[[i]] <- transform(N[[i]], rank = rank(a, ties.method="first"))
}
N
N <- do.call("rbind", N)
N
?lapply
lapply(X, FUN, ...)
x <- list(a=matrix(1:4, c(2,2)), b=matrix(1:6,c(3,2) ))
lapply(x, function(z) z[,1])
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))
lapply(x, mean)
x <- 1:4
lapply(x, runif)
lapply(x, runif, min = 0, max = 10)
x <- list(a=matrix(1:4, c(2,2)), b=matrix(1:6,c(3,2) ))
lapply(x, function(z) z[,1])
x
#lapply( unique(iris$Species), function(x) quantile(iris[, "Sepal."]))
names(iris)
#lapply( unique(iris$Species), function(x) quantile(iris[iris$Species == x, c("Sepal.Length", Petal.Length)]))
lapply( unique(iris$Species), function(x) quantile(iris[iris$Species == x, c("Sepal.Length", Petal.Length)]))
lapply( unique(iris$Species), function(x) quantile(iris[iris$Species == x, c("Sepal.Length", "Petal.Length")]))
lapply( unique(iris$Species), function(x) quantile(iris[iris$Species == x, 1]))
lapply( unique(iris$Species), function(x) quantile(iris[iris$Species == x, c(1,2)]))
lapply( unique(iris$Species), function(x) quantile(iris[iris$Species == x, "Sepal.Length"]))
x <- list(a=matrix(1:4, c(2,2)), b=matrix(1:6,c(3,2) ))
x
sapply(x, mean)
str(tapply)
x <- c(rnorm(10), runif(10), rnorm(10))
f <- gl(3, 10)
tapply(x, f,  mean)
tapply(x, f,  range, simplify=FALSE)
list(rep(1,4), rep(2,3), rep(3,2), rep(4,1))
args(mapply)
mapply(rep, 1:4, MoreArgs=4:1)
?mapply
str(mapply)
mapply(rep, times=1:4, x=4:1)
str(ddply)
?ddply
noise <- function(n, mean, sd){
rnorm(n, mean, sd)
}
noise(3, 4, 2)
noise(1:5, 5:1, 2)
mapply(noise, 1:5, 5:1, 2)
mapply(noise, n=1:5, mean-=5:1, 2)
mapply(noise, n=1:5, mean=5:1, 2)
noise <- function(n, mean, sd){
rnorm(n, mean, sd)
}
noise(3, 4, 2)
mapply(noise, n=1:5, mean=5:1, 2)
str(ddply)
head(airquality)
ddply(airquality, .(Month, Day), transform,
Avg_Wind = mean(Wind))
ddply(airquality, .(Month), transform,
Avg_Wind = mean(Wind))
str(data.table)
library(data.table)
str(data.table)
?data.table
aq <- data.table(airquality)
head(aq)
setkey(aq, Month, Day)
ddply(airquality, .(Month), transform, Avg_Wind = mean(Wind), Max_wind = max(Wind))
ddply(airquality, .(Month), transform, Avg_Wind = mean(Wind), Max_wind = which.max(Wind))
ddply(airquality, .(Month), summarize, Avg_Wind = mean(Wind), Max_wind = max(Wind))
aq <- data.table(airquality)
setkey(aq, Month, Day)
aq[, list(Max_wind = max(Wind),)]
aq[, list(Max_wind = max(Wind),
Avg_wind = mean(Wind)),
by="Month"]
ddply(airquality, .(Month), summarize, Avg_Wind = mean(Wind), Max_wind = max(Wind))
library(datasets)
hist(airquality$Ozone)  ## Draw a new plot
library(datasets)
with(airquality, plot(Wind, Ozone))
library(datasets)
hist(airquality$Ozone)  ## Draw a new plot
library(datasets)
with(airquality, plot(Wind, Ozone), main = "Scatterplot Wind Ozone airquality")
library(datasets)
with(airquality, plot(Wind, Ozone, main = "Scatterplot Wind Ozone airquality"))
library(datasets)
airquality <- transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)")
title("Boxplot Monthly Ozone")
library(datasets)
airquality <- transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col="blue")
library(datasets)
airquality <- transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col="steelblue")
with(airquality, plot(Wind, Ozone, main = "Scatterplot Wind Ozone airquality", pch=29))
with(airquality, plot(Wind, Ozone, main = "Scatterplot Wind Ozone airquality", pch=2))
warnings()
with(airquality, plot(Wind, Ozone, main = "Scatterplot Wind Ozone airquality", pch=1))
with(airquality, plot(Wind, Ozone, main = "Scatterplot Wind Ozone airquality", pch=3))
abline(lm(Ozone~Wind, data=airquality))
abline(lm(Ozone~Wind, data=airquality), lty=4)
abline(lm(Ozone~Wind, data=airquality), lty=44)
abline(lm(Ozone~Wind, data=airquality), lty=400)
abline(lm(Ozone~Wind, data=airquality), lty=0)
abline(lm(Ozone~Wind, data=airquality), lty="dashed")
abline(lm(Ozone~Wind, data=airquality), lwd=4)
abline(lm(Ozone~Wind, data=airquality), lwd=4, lty="dash\")
abline(lm(Ozone~Wind, data=airquality), lwd=4, lty="dash")
abline(lm(Ozone~Wind, data=airquality), lwd=4, lty="dash")
abline(lm(Ozone~Wind, data=airquality), lwd=4, lty=5)
abline(lm(Ozone~Wind, data=airquality), lwd=4, lty=534)
?abline
abline(lm(Ozone~Wind, data=airquality), lwd=4, lty=3)
abline(lm(Ozone~Wind, data=airquality), lwd=4, lty=1)
abline(lm(Ozone~Wind, data=airquality), lwd=4, lty=1, col="red")
with(airquality, plot(Wind, Ozone, main = "Scatterplot Wind Ozone airquality"))
with(airquality, plot(Wind, Ozone, main = "Scatterplot Wind Ozone airquality", pch=3))
abline(lm(Ozone~Wind, data=airquality), lwd=4, lty=1, col="red")
with(airquality, plot(Wind, Ozone))
plot(pch=3)
with(airquality, plot(Wind, Ozone, pch=3))
par(mfcol=2)
par(mfcol=2)
plot("pch")
par("pch")
par("pch" = 3)
with(airquality, plot(Wind, Ozone))
par("pch" = 1)
with(airquality, plot(Wind, Ozone))
par("mfrow" = 2)
par("mfrow" = 2)
par("lty") ; par("col") ; par("pch") ; par("bg") ; par("mar") ; par("mfrow")
par("lty" = 4) ; par("col" = "red") ; par("pch" =3) ; par("bg" = 'yellow') ; par("mar") ; par("mfrow" = c(2,2))
with(airquality, plot(Wind, Ozone))
abline(Ozone~Wind, data = airquality)
abline(lm(Ozone~Wind, data = airquality))
par("lty" = 1) ; par("col" = "black") ; par("pch" =1) ; par("bg" = 'yellow') ; par("mar") ; par("mfrow" = c(1,1))
with(airquality, plot(Wind, Ozone))
par("lty" = 1) ; par("col" = "black") ; par("pch" =1) ; par("bg" = 'transparent') ; par("mar") ; par("mfrow" = c(1,1))
with(airquality, plot(Wind, Ozone))
lines(lm(Ozone~Wind, data=airquality))
lines()
lines(Wind, Ozone)
lines(airquality$Wind[1:10], airquality$Ozone[1:10])
points()
points(airquality$Wind[1:10], airquality$Ozone[1:10])
points(airquality$Wind[5:20], airquality$Ozone[5:20])
text("random")
text(x=20, y=0, '')
text(x=20, y=0, 'r')
mtext("CHICKEN")
axis(side=4, "Names")
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City"))
points(Wind, Ozone, col = "blue")
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
with(subset(airquality, Month != 5), points(Wind, Ozone, col = "red"))
legend("topright", pch = 1, col = c("blue", "red"), legend = c("May", "Other Months"))
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City",
pch = 20))
model <- lm(Ozone ~ Wind, airquality)
abline(model, lwd = 2)
par(mfrow = c(1, 2))
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
})
par(mfrow = c(1, 2))
with(airquality, {
hist(Ozone, main = "Ozone Histogram")
hist(Solar.R, main = "Solar Radiation Histogram")
})
boxplot(pm25 ~ region, data = pollution, col = "red")
library(datasets)
data(pollution)
head(airquality)
head(iris)
boxplot(Sepal.Length ~ Species, data = iris, col = "red")
par(mfrow=c(1,1))
boxplot(Sepal.Length ~ Species, data = iris, col = "red")
title("Sepal Length Across Species")
abline(h = mean(Sepal.Lenght, data = iris), lty=3)
abline(h = mean(Sepal.Length, data = iris), lty=3)
abline(h = mean(iris$Sepal.Length), lty=3)
par(mfrow = c(2, 1), mar = c(4, 4, 2, 1))
hist(subset(pollution, region == "east")$pm25, col = "yellow")
hist(subset(pollution, region == "west")$pm25, col = "steelblue")
par(mfrow = c(2, 1), mar = c(4, 4, 2, 1))
hist(subset(iris, region == "setosa")$Petal.Length, col = "yellow")
hist(subset(iris, region == "versicolor")$Petal.Length, col = "steelblue")
par(mfrow = c(2, 1), mar = c(4, 4, 2, 1))
hist(subset(iris, species == "setosa")$Petal.Length, col = "yellow")
hist(subset(iris, species == "versicolor")$Petal.Length, col = "steelblue")
par(mfrow = c(2, 1), mar = c(4, 4, 2, 1))
hist(subset(iris, Species == "setosa")$Petal.Length, col = "yellow")
hist(subset(iris, Species == "versicolor")$Petal.Length, col = "steelblue")
par(mfcol=c(2,1))
par(mfrow = c(2, 1), mar = c(4, 4, 2, 1))
hist(subset(iris, Species == "setosa")$Petal.Length, col = "yellow")
hist(subset(iris, Species == "versicolor")$Petal.Length, col = "steelblue")
par(mfcol=c(1,2))
par(mfrow = c(2, 1), mar = c(4, 4, 2, 1))
hist(subset(iris, Species == "setosa")$Petal.Length, col = "yellow")
hist(subset(iris, Species == "versicolor")$Petal.Length, col = "steelblue")
